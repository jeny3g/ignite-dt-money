{"version":3,"sources":["services/api.ts","hooks/useTransactions.tsx","assets/income.svg","assets/outcome.svg","assets/total.svg","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","assets/close.svg","components/NewTransactionModal/styles.ts","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Container","styled","div","Summary","summary","reduce","acc","type","deposits","amount","total","withdraws","src","incomeImg","alt","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalImg","TransactionsTable","map","title","category","DateTimeFormat","id","main","Dashboard","header","Content","Header","onOpenNewTransactionModal","logoImg","onClick","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setCategory","setType","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","Modal","setAppElement","GlobalStyle","createGlobalStyle","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAEaA,E,OAAMC,EAAMC,OAAO,CAC9BC,QAAS,8B,OC4BLC,EAAsBC,wBAC1B,IAGWC,EAAuB,SAAC,GAEH,IADhCC,EAC+B,EAD/BA,SAC+B,EACSC,mBAAwB,IADjC,mBACxBC,EADwB,KACVC,EADU,iDAS/B,WAAiCC,GAAjC,iBAAAC,EAAA,sEACyBZ,EAAIa,KAAK,gBAAT,2BAClBF,GADkB,IAErBG,UAAW,IAAIC,QAHnB,OACQC,EADR,OAMUC,EAAgBD,EAASE,KAAzBD,YAERP,EAAgB,GAAD,mBAAKD,GAAL,CAAmBQ,KARpC,4CAT+B,sBAoB/B,OAjBAE,qBAAU,WACRnB,EACGoB,IAAI,gBACJC,MAAK,SAACL,GAAD,OAAcN,EAAgBM,EAASE,KAAKT,mBACnD,IAcD,cAACL,EAAoBkB,SAArB,CAA8BC,MAAO,CAAEd,eAAce,kBArBxB,6CAqB7B,SACGjB,KAKA,SAASkB,IAGd,OAFgBC,qBAAWtB,GCjEd,I,IAAA,MAA0B,mCCA1B,MAA0B,oCCA1B,MAA0B,kC,cCE5BuB,EAAYC,IAAOC,IAAV,imBCMf,SAASC,IAAW,IAWnBC,EAVmBN,IAAjBhB,aAUqBuB,QAC3B,SAACC,EAAKhB,GASJ,MARyB,YAArBA,EAAYiB,MACdD,EAAIE,UAAYlB,EAAYmB,OAC5BH,EAAII,OAASpB,EAAYmB,SAEzBH,EAAIK,WAAarB,EAAYmB,OAC7BH,EAAII,OAASpB,EAAYmB,QAGpBH,IAET,CACEE,SAAU,EACVG,UAAW,EACXD,MAAO,IAIX,OACE,eAACV,EAAD,WACE,gCACE,mCACE,yCACA,qBAAKY,IAAKC,EAAWC,IAAI,gBAE3B,iCACG,IAAIC,KAAKC,aAAa,QAAS,CAC9BC,MAAO,WACPC,SAAU,QACTC,OAAOf,EAAQI,eAItB,gCACE,mCACE,uCACA,qBAAKI,IAAKQ,EAAYN,IAAI,iBAE5B,uCAEG,IAAIC,KAAKC,aAAa,QAAS,CAC9BC,MAAO,WACPC,SAAU,QACTC,OAAOf,EAAQO,iBAItB,sBAAKU,UAAU,uBAAf,UACE,mCACE,sCACA,qBAAKT,IAAKU,EAAUR,IAAI,aAE1B,iCACG,IAAIC,KAAKC,aAAa,QAAS,CAC9BC,MAAO,WACPC,SAAU,QACTC,OAAOf,EAAQM,eC1ErB,I,EAAMV,EAAYC,IAAOC,IAAV,4mBCCf,SAASqB,IAAqB,IAC3BzC,EAAiBgB,IAAjBhB,aAER,OACE,cAAC,EAAD,UACE,kCACE,gCACE,+BACE,wCACA,uCACA,2CACA,2CAIJ,gCACGA,EAAa0C,KAAI,SAAClC,GAAD,OAChB,+BACE,6BAAKA,EAAYmC,QACjB,oBAAIJ,UAAW/B,EAAYiB,KAA3B,SACG,IAAIQ,KAAKC,aAAa,QAAS,CAC9BC,MAAO,WACPC,SAAU,QACTC,OAAO7B,EAAYmB,UAExB,6BAAKnB,EAAYoC,WACjB,6BACG,IAAIX,KAAKY,eAAe,QAAS,IAAIR,OACpC,IAAI/B,KAAKE,EAAYH,gBAXlBG,EAAYsC,cClB1B,IAAM5B,EAAYC,IAAO4B,KAAV,8FCEf,SAASC,IACd,OACE,eAAC,EAAD,WACE,cAAC3B,EAAD,IACA,cAACoB,EAAD,OCRS,I,IAAA,MAA0B,iCCE5BvB,EAAYC,IAAO8B,OAAV,wDAITC,EAAU/B,IAAOC,IAAV,gcCEb,SAAS+B,EAAT,GAA6D,IAA3CC,EAA0C,EAA1CA,0BACvB,OACE,cAAC,EAAD,UACE,eAACF,EAAD,WACE,qBAAKpB,IAAKuB,EAASrB,IAAI,aACvB,wBAAQP,KAAK,SAAS6B,QAASF,EAA/B,uC,6BCbO,MAA0B,kC,QCG5BlC,EAAYC,IAAOoC,KAAV,8xBAgDTC,EAA2BrC,IAAOC,IAAV,oHAY/BqC,EAAS,CACbC,MAAO,UACPC,IAAK,WAGMC,EAAWzC,IAAO0C,OAAV,mcAKL,SAACC,GAAD,OACZA,EAAMC,SACFC,YAAe,GAAKP,EAAOK,EAAMG,cACjC,gBASYC,YAAO,GAAK,YCpEzB,SAASC,EAAT,GAGuB,IAF5BC,EAE2B,EAF3BA,OACAC,EAC2B,EAD3BA,eAEQtD,EAAsBC,IAAtBD,kBADmB,EAGDhB,mBAAS,IAHR,mBAGpB4C,EAHoB,KAGb2B,EAHa,OAICvE,mBAAS,GAJV,mBAIpB4B,EAJoB,KAIZ4C,EAJY,OAKKxE,mBAAS,WALd,mBAKpB6C,EALoB,KAKV4B,EALU,OAMHzE,mBAAS,WANN,mBAMpB0B,EANoB,KAMdgD,EANc,iDAQ3B,WAA0CC,GAA1C,SAAAvE,EAAA,6DACEuE,EAAMC,iBADR,SAGQ5D,EAAkB,CACtB4B,QACAhB,SACAiB,WACAnB,SAPJ,OAUE6C,EAAS,IACTC,EAAU,GACVC,EAAY,WACZC,EAAQ,IACRJ,IAdF,4CAR2B,sBAyB3B,OACE,eAAC,IAAD,CACED,OAAQA,EACRC,eAAgBA,EAChBO,iBAAiB,sBACjBrC,UAAU,sBAJZ,UAME,wBACEd,KAAK,SACL6B,QAASe,EACT9B,UAAU,oBAHZ,SAKE,qBAAKT,IAAK+C,EAAU7C,IAAI,mBAE1B,eAAC,EAAD,CAAW8C,SAvCY,4CAuCvB,UACE,2DAEA,uBACEC,YAAY,YACZjE,MAAO6B,EACPqC,SAAU,SAACN,GAAD,OAAWJ,EAASI,EAAMO,OAAOnE,UAG7C,uBACEW,KAAK,SACLsD,YAAY,QACZjE,MAAOa,EACPqD,SAAU,SAACN,GAAD,OAAWH,EAAUW,OAAOR,EAAMO,OAAOnE,WAGrD,eAAC0C,EAAD,WACE,eAACI,EAAD,CACEnC,KAAK,SACL6B,QAAS,kBAAMmB,EAAQ,YACvBV,SAAmB,YAATtC,EACVwC,YAAY,QAJd,UAME,qBAAKnC,IAAKC,EAAWC,IAAI,YACzB,8CAGF,eAAC4B,EAAD,CACEnC,KAAK,SACL6B,QAAS,kBAAMmB,EAAQ,aACvBV,SAAmB,aAATtC,EACVwC,YAAY,MAJd,UAME,qBAAKnC,IAAKQ,EAAYN,IAAI,aAC1B,kDAIJ,uBACE+C,YAAY,YACZjE,MAAO8B,EACPoC,SAAU,SAACN,GAAD,OAAWF,EAAYE,EAAMO,OAAOnE,UAGhD,wBAAQW,KAAK,SAAb,6BA7FR0D,IAAMC,cAAc,SCRb,IAAMC,EAAcC,YAAH,49CCKjB,SAASC,KAAO,IAAD,EAElBxF,oBAAS,GAFS,mBACbyF,EADa,KACcC,EADd,KAYpB,OACE,eAAC,EAAD,WACE,cAACtC,EAAD,CAAQC,0BAVZ,WACEqC,GAA6B,MAU3B,cAACzC,EAAD,IAEA,cAACmB,EAAD,CACEC,OAAQoB,EACRnB,eAXN,WACEoB,GAA6B,MAa3B,cAACJ,EAAD,OCxBNK,YAAa,CACXC,OAAQ,CACNnF,YAAaoF,KAGfC,MALW,SAKLC,GACJA,EAAOC,GAAGC,SAAS,CACjBhG,aAAc,CACZ,CACE8C,GAAI,EACJH,MAAO,wBACPlB,KAAM,UACNmB,SAAU,MACVjB,OAAQ,IACRtB,UAAW,IAAIC,KAAK,wBAEtB,CACEwC,GAAI,EACJH,MAAO,UACPlB,KAAM,WACNmB,SAAU,OACVjB,OAAQ,KACRtB,UAAW,IAAIC,KAAK,4BAM5B2F,OA5BW,WA4BD,IAAD,OACPC,KAAKC,UAAY,MAEjBD,KAAKvF,IAAI,iBAAiB,WACxB,OAAO,EAAKyF,OAAOC,IAAI,kBAGzBH,KAAK9F,KAAK,iBAAiB,SAACgG,EAAQE,GAClC,IAAM7F,EAAO8F,KAAKC,MAAMF,EAAQG,aAEhC,OAAOL,EAAO3G,OAAO,cAAegB,SAK1CiG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACrB,GAAD,MAEFsB,SAASC,eAAe,W","file":"static/js/main.b2051556.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const api = axios.create({\r\n  baseURL: \"http://localhost:3000/api\"\r\n});\r\n","import {\n  createContext,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { api } from \"../services/api\";\n\ninterface Transaction {\n  id: number;\n  title: string;\n  amount: number;\n  type: string;\n  category: string;\n  createdAt: string;\n}\n\ntype TransactionInput = Omit<Transaction, \"id\" | \"createdAt\">;\n\n// type TransactionInput = Pick<Transaction, \"title\" | \"amount\" | \"type\" | \"category\">;\n\ninterface TransactionsProviderProps {\n  children: ReactNode;\n}\n\ninterface TransactionsContextData {\n  transactions: Transaction[];\n  createTransaction: (transaction: TransactionInput) => Promise<void>;\n}\n\nconst TransactionsContext = createContext<TransactionsContextData>(\n  {} as TransactionsContextData\n);\n\nexport const TransactionsProvider = ({\n  children,\n}: TransactionsProviderProps) => {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n\n  useEffect(() => {\n    api\n      .get(\"transactions\")\n      .then((response) => setTransactions(response.data.transactions));\n  }, []);\n\n  async function createTransaction(transactionInput: TransactionInput) {\n    const response = await api.post(\"/transactions\", {\n      ...transactionInput,\n      createdAt: new Date(),\n    });\n\n    const { transaction } = response.data;\n\n    setTransactions([...transactions, transaction]);\n  }\n\n  return (\n    <TransactionsContext.Provider value={{ transactions, createTransaction }}>\n      {children}\n    </TransactionsContext.Provider>\n  );\n};\n\nexport function useTransactions() {\n  const context = useContext(TransactionsContext);\n\n  return context;\n}\n","export default __webpack_public_path__ + \"static/media/income.6106d856.svg\";","export default __webpack_public_path__ + \"static/media/outcome.34032f7e.svg\";","export default __webpack_public_path__ + \"static/media/total.285fe24b.svg\";","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 2rem;\r\n  margin-top: -10rem;\r\n\r\n  div {\r\n    background: var(--shape);\r\n    padding: 1.5rem 2rem;\r\n    border-radius: 0.25rem;\r\n    color: var(--text-title);\r\n\r\n    header {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n    }\r\n\r\n    strong {\r\n      display: block;\r\n      margin-top: 1rem;\r\n      font-size: 2rem;\r\n      font-weight: 500;\r\n      line-height: 3rem;\r\n    }\r\n\r\n    &.highlight-background {\r\n      background: var(--green);\r\n      color: #fff;\r\n    }\r\n  }\r\n`;\r\n","import { useTransactions } from \"../../hooks/useTransactions\";\n\nimport incomeImg from \"../../assets/income.svg\";\nimport outcomeImg from \"../../assets/outcome.svg\";\nimport totalImg from \"../../assets/total.svg\";\n\nimport { Container } from \"./styles\";\n\nexport function Summary() {\n  const { transactions } = useTransactions();\n\n  // const totalDeposits = transactions.reduce((acc, transaction) => {\n  //   if (transaction.type === \"deposit\") {\n  //     return acc + transaction.amount;\n  //   }\n\n  //   return acc;\n  // }, 0);\n\n  const summary = transactions.reduce(\n    (acc, transaction) => {\n      if (transaction.type === \"deposit\") {\n        acc.deposits += transaction.amount;\n        acc.total += transaction.amount;\n      } else {\n        acc.withdraws += transaction.amount;\n        acc.total -= transaction.amount;\n      }\n\n      return acc;\n    },\n    {\n      deposits: 0,\n      withdraws: 0,\n      total: 0,\n    }\n  );\n\n  return (\n    <Container>\n      <div>\n        <header>\n          <p>Entradas</p>\n          <img src={incomeImg} alt=\"Entradas\" />\n        </header>\n        <strong>\n          {new Intl.NumberFormat(\"pt-BR\", {\n            style: \"currency\",\n            currency: \"BRL\",\n          }).format(summary.deposits)}\n        </strong>\n      </div>\n\n      <div>\n        <header>\n          <p>Saidas</p>\n          <img src={outcomeImg} alt=\"Saídas\" />\n        </header>\n        <strong>\n          -\n          {new Intl.NumberFormat(\"pt-BR\", {\n            style: \"currency\",\n            currency: \"BRL\",\n          }).format(summary.withdraws)}\n        </strong>\n      </div>\n\n      <div className=\"highlight-background\">\n        <header>\n          <p>Total</p>\n          <img src={totalImg} alt=\"Total\" />\n        </header>\n        <strong>\n          {new Intl.NumberFormat(\"pt-BR\", {\n            style: \"currency\",\n            currency: \"BRL\",\n          }).format(summary.total)}\n        </strong>\n      </div>\n    </Container>\n  );\n}\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  margin-top: 4rem;\r\n\r\n  table {\r\n    width: 100%;\r\n    border-spacing: 0 0.5rem;\r\n\r\n    th {\r\n      color: var(--text-body);\r\n      font-weight: 400;\r\n      padding: 1rem 2rem;\r\n      text-align: left;\r\n      line-height: 1.5rem;\r\n    }\r\n\r\n    td {\r\n      padding: 1rem 2rem;\r\n      border: 0;\r\n      background: var(--shape);\r\n      color: var(--text-body);\r\n      border-radius: 0.25rem;\r\n\r\n      &:first-child {\r\n        color: var(--text-title);\r\n      }\r\n\r\n      &.deposit {\r\n        color: var(--green);\r\n      }\r\n\r\n      &.withdraw {\r\n        color: var(--red);\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { useTransactions } from \"../../hooks/useTransactions\";\nimport { Container } from \"./styles\";\n\nexport function TransactionsTable() {\n  const { transactions } = useTransactions();\n\n  return (\n    <Container>\n      <table>\n        <thead>\n          <tr>\n            <th>Titulo</th>\n            <th>Valor</th>\n            <th>Categoria</th>\n            <th>Data</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {transactions.map((transaction) => (\n            <tr key={transaction.id}>\n              <td>{transaction.title}</td>\n              <td className={transaction.type}>\n                {new Intl.NumberFormat(\"pt-BR\", {\n                  style: \"currency\",\n                  currency: \"BRL\",\n                }).format(transaction.amount)}\n              </td>\n              <td>{transaction.category}</td>\n              <td>\n                {new Intl.DateTimeFormat(\"pt-BR\", {}).format(\n                  new Date(transaction.createdAt)\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Container>\n  );\n}\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n  max-width: 1120px;\r\n  margin: 0 auto;\r\n  padding: 2.5rem 1rem;\r\n`;\r\n","import { Summary } from \"../Summary\";\r\nimport { TransactionsTable } from \"../TransactionsTable\";\r\nimport { Container } from \"./styles\";\r\n\r\nexport function Dashboard() {\r\n  return (\r\n    <Container>\r\n      <Summary />\r\n      <TransactionsTable />\r\n    </Container>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.b30f412f.svg\";","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.header`\r\n  background: var(--blue);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  max-width: 1120px;\r\n  margin: 0 auto;\r\n\r\n  padding: 2rem 1rem 12rem;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  button {\r\n    font-size: 1rem;\r\n    color: #fff;\r\n    background: var(--blue-light);\r\n    border: 0;\r\n    padding: 0 2rem;\r\n    border-radius: 0.25rem;\r\n    height: 3rem;\r\n\r\n    transition: filter 0.2s;\r\n\r\n    &:hover {\r\n      filter: brightness(0.9);\r\n    }\r\n  }\r\n`;\r\n","import logoImg from \"../../assets/logo.svg\";\n\nimport { Container, Content } from \"./styles\";\n\ninterface HeaderProps {\n  onOpenNewTransactionModal: () => void;\n}\n\nexport function Header({ onOpenNewTransactionModal }: HeaderProps) {\n  return (\n    <Container>\n      <Content>\n        <img src={logoImg} alt=\"dt money\" />\n        <button type=\"button\" onClick={onOpenNewTransactionModal}>\n          Nova transação\n        </button>\n      </Content>\n    </Container>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/close.db04ce19.svg\";","import styled from \"styled-components\";\nimport { darken, transparentize } from \"polished\";\n\nexport const Container = styled.form`\n  h2 {\n    color: var(--text-title);\n    font-size: 1.5rem;\n    margin-bottom: 2rem;\n  }\n\n  input {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    border-radius: 0.25rem;\n\n    border: 1px solid #d7d7d7;\n    background: #e7e9ee;\n\n    font-weight: 400;\n    font-size: 1rem;\n\n    &::placeholder {\n      color: var(--text-body);\n    }\n\n    & + input {\n      margin-top: 1rem;\n    }\n  }\n\n  button[type=\"submit\"] {\n    width: 100%;\n    padding: 0 1.5rem;\n    height: 4rem;\n    background: var(--green);\n    color: #fff;\n    border-radius: 0.25rem;\n    border: 0;\n    font-size: 1rem;\n    margin-top: 1.5rem;\n    font-weight: 600;\n\n    transition: filter 0.2s;\n\n    &:hover {\n      filter: brightness(0.9);\n    }\n  }\n`;\n\nexport const TransactionTypeContainer = styled.div`\n  margin: 1rem 0;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0.5rem;\n`;\n\ninterface RadioButtonProps {\n  isActive: boolean;\n  activeColor: \"green\" | \"red\";\n}\n\nconst colors = {\n  green: \"#33cc95\",\n  red: \"#e52e4d\",\n};\n\nexport const RadioBox = styled.button<RadioButtonProps>`\n  height: 4rem;\n  border: 1px solid #d7d7d7;\n  border-radius: 0.25rem;\n\n  background: ${(props) =>\n    props.isActive\n      ? transparentize(0.9, colors[props.activeColor])\n      : \"transparent\"};\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  transition: border-color 0.2s;\n\n  &:hover {\n    border-color: ${darken(0.1, \"#d7d7d7\")};\n  }\n\n  img {\n    width: 20px;\n    height: 20px;\n  }\n\n  span {\n    display: inline-block;\n    margin-left: 1rem;\n    font-size: 1rem;\n    color: var(--text-title);\n  }\n`;\n","import { FormEvent, useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { useTransactions } from \"../../hooks/useTransactions\";\n\nimport incomeImg from \"../../assets/income.svg\";\nimport outcomeImg from \"../../assets/outcome.svg\";\nimport closeImg from \"../../assets/close.svg\";\n\nimport { Container, TransactionTypeContainer, RadioBox } from \"./styles\";\n\nModal.setAppElement(\"#root\");\n\ninterface NewTransactionModalProps {\n  isOpen: boolean;\n  onRequestClose: () => void;\n}\n\nexport function NewTransactionModal({\n  isOpen,\n  onRequestClose,\n}: NewTransactionModalProps) {\n  const { createTransaction } = useTransactions();\n\n  const [title, setTitle] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [category, setCategory] = useState(\"deposit\");\n  const [type, setType] = useState(\"deposit\");\n\n  async function handleCreateNewTransaction(event: FormEvent) {\n    event.preventDefault();\n\n    await createTransaction({\n      title,\n      amount,\n      category,\n      type,\n    });\n\n    setTitle(\"\");\n    setAmount(0);\n    setCategory(\"deposit\");\n    setType(\"\");\n    onRequestClose();\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onRequestClose={onRequestClose}\n      overlayClassName=\"react-modal-overlay\"\n      className=\"react-modal-content\"\n    >\n      <button\n        type=\"button\"\n        onClick={onRequestClose}\n        className=\"react-modal-close\"\n      >\n        <img src={closeImg} alt=\"Fechar modal\" />\n      </button>\n      <Container onSubmit={handleCreateNewTransaction}>\n        <h2>Cadastrar transação</h2>\n\n        <input\n          placeholder=\"Título\"\n          value={title}\n          onChange={(event) => setTitle(event.target.value)}\n        />\n\n        <input\n          type=\"number\"\n          placeholder=\"Valor\"\n          value={amount}\n          onChange={(event) => setAmount(Number(event.target.value))}\n        />\n\n        <TransactionTypeContainer>\n          <RadioBox\n            type=\"button\"\n            onClick={() => setType(\"deposit\")}\n            isActive={type === \"deposit\"}\n            activeColor=\"green\"\n          >\n            <img src={incomeImg} alt=\"Entrada\" />\n            <span>Entrada</span>\n          </RadioBox>\n\n          <RadioBox\n            type=\"button\"\n            onClick={() => setType(\"withdraw\")}\n            isActive={type === \"withdraw\"}\n            activeColor=\"red\"\n          >\n            <img src={outcomeImg} alt=\"Saída\" />\n            <span>Saída</span>\n          </RadioBox>\n        </TransactionTypeContainer>\n\n        <input\n          placeholder=\"Categoria\"\n          value={category}\n          onChange={(event) => setCategory(event.target.value)}\n        />\n\n        <button type=\"submit\">Cadastrar</button>\n      </Container>\n    </Modal>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  :root{\n    --background: #f0f2f5;\n    --red: #e52e4d;\n    --green: #33cc95;\n    --blue: #5429cc;\n\n    --blue-light: #6933ff;\n\n    --text-title: #363f5f;\n    --text-body: #969cb3;\n\n    --background: #f8f2f5;\n    --shape: #fff;\n  }\n\n  *{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html{ \n    @media(max-width:1080px){\n      font-size: 93.75%;\n    }\n\n    @media (max-width: 720px){\n      font-size: 87.5%;\n    }\n  }\n\n  body{ \n    background: var(--background);\n    -webkit-font-font-smooth: antialiased;\n  }\n\n  body, input, textarea, button{\n    font-family: 'Poppins', sans-serif;\n    font-weight: 400;\n  }\n\n  h1,h2,h3, h4, h5, h6, strong{\n    font-weight: 600;\n  }\n\n  button{ \n    cursor: pointer;\n  }\n\n  [disabled]{\n    opacity: 0.6;\n    cursor: not-allowed;\n  }\n\n  .react-modal-overlay{\n    background: rgba(0,0,0,0.5);\n\n    position: fixed;\n    top:0;\n    bottom:0;\n    right:0;\n    left:0;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .react-modal-content{\n    width: 100%;\n    max-width: 576px;\n    background: var(--background);\n    padding: 3rem;\n    position: relative;\n    border-radius: 0.25rem;\n  }\n\n  .react-modal-close{\n    position: absolute;\n    right: 1.5rem;\n    top: 1.5rem;\n    border: 0;\n    background: transparent;\n\n    transition: filter 0.2s;\n\n    &:hover{\n      filter: brightness(0.8);\n    }\n  }\n`;\n","import { useState } from \"react\";\nimport { Dashboard } from \"./components/Dashboard\";\nimport { Header } from \"./components/Header\";\nimport { NewTransactionModal } from \"./components/NewTransactionModal\";\nimport { TransactionsProvider } from \"./hooks/useTransactions\";\nimport { GlobalStyle } from \"./styles/global\";\n\nexport function App() {\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] =\n    useState(false);\n\n  function handleOpenNewTransactionModal() {\n    setIsNewTransactionModalOpen(true);\n  }\n\n  function handleCloseNewTransactionModal() {\n    setIsNewTransactionModalOpen(false);\n  }\n\n  return (\n    <TransactionsProvider>\n      <Header onOpenNewTransactionModal={handleOpenNewTransactionModal} />\n      <Dashboard />\n\n      <NewTransactionModal\n        isOpen={isNewTransactionModalOpen}\n        onRequestClose={handleCloseNewTransactionModal}\n      />\n\n      <GlobalStyle />\n    </TransactionsProvider>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createServer, Model } from \"miragejs\";\nimport { App } from \"./App\";\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: \"Freelancer de website\",\n          type: \"deposit\",\n          category: \"Dev\",\n          amount: 6000,\n          createdAt: new Date(\"2021-02-12 09:00:00\"),\n        },\n        {\n          id: 2,\n          title: \"Aluguel\",\n          type: \"withdraw\",\n          category: \"Casa\",\n          amount: 1100,\n          createdAt: new Date(\"2021-02-14 11:00:00\"),\n        },\n      ],\n    });\n  },\n\n  routes() {\n    this.namespace = \"api\";\n\n    this.get(\"/transactions\", () => {\n      return this.schema.all(\"transaction\");\n    });\n\n    this.post(\"/transactions\", (schema, request) => {\n      const data = JSON.parse(request.requestBody);\n\n      return schema.create(\"transaction\", data);\n    });\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}